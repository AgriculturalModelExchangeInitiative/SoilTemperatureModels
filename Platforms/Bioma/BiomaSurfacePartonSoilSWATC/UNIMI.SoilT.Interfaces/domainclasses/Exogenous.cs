//------------------------------------------------------------------------------
// <auto-generated>
//     Il codice Ã¨ stato generato da uno strumento.
//     Versione runtime:2.0.50727.5477
//
//     Le modifiche apportate a questo file possono provocare un comportamento non corretto e andranno perse se
//     il codice viene rigenerato.
// </auto-generated>
//------------------------------------------------------------------------------

/// This class was created from file C:\Users\Diprove\Desktop\Reimplementazione\SoilT\UNIMI.SoilT_perSoilBorne\UNIMI.SoilT\DataStructure\SoilTemperatureExogenous.xml
/// DCC - Domain Class Coder, http://agsys.cra-cin.it/tools , see Applications, DCC
// 
namespace UNIMI.SoilT.Interfaces
{
    using System;
    using System.Collections.Generic;
    using CRA.ModelLayer;
    using System.Reflection;
    using CRA.ModelLayer.ParametersManagement;
    using CRA.ModelLayer.Core;
    
    
    /// <summary>Exogenous Domain class contains the accessors to values</summary>
    public class Exogenous : ICloneable, IDomainClass
    {
        
        #region Private fields
        private double _AirTemperatureMaximum;
        
        private double _AirTemperatureMinimum;
        
        private double _LatentHeatFlux;
        
        private double _NetRadiation;
        
        private double _GlobalSolarRadiation;
        
        private double _DayLength;
        
        private double _AirTemperatureAnnualAverage;
        
        private double _Albedo;
        
        private double _WaterEquivalentOfSnowPack;
        
        private double[] _AirTemperatureHourly = new double[24];
        
        private double _HourOfSunrise;
        
        private double _HourOfSunset;
        #endregion
        
        #region Private field for properties
        private ParametersIO _parametersIO;
        #endregion
        
        #region Constructor
        /// <summary>No parameters constructor</summary>
        public Exogenous()
        {
            _parametersIO = new ParametersIO(this);
        }
        #endregion
        
        #region Public properties
        /// <summary>Maximum daily air temperature</summary>
        public double AirTemperatureMaximum
        {
            get
            {
                return this._AirTemperatureMaximum;
            }
            set
            {
                this._AirTemperatureMaximum = value;
            }
        }
        
        /// <summary>Minimum daily air temperature</summary>
        public double AirTemperatureMinimum
        {
            get
            {
                return this._AirTemperatureMinimum;
            }
            set
            {
                this._AirTemperatureMinimum = value;
            }
        }
        
        /// <summary>Surface latent heat flux as an optional of temperature model</summary>
        public double LatentHeatFlux
        {
            get
            {
                return this._LatentHeatFlux;
            }
            set
            {
                this._LatentHeatFlux = value;
            }
        }
        
        /// <summary>Net radiation as an optional of temperature model</summary>
        public double NetRadiation
        {
            get
            {
                return this._NetRadiation;
            }
            set
            {
                this._NetRadiation = value;
            }
        }
        
        /// <summary>Daily global solar radiation</summary>
        public double GlobalSolarRadiation
        {
            get
            {
                return this._GlobalSolarRadiation;
            }
            set
            {
                this._GlobalSolarRadiation = value;
            }
        }
        
        /// <summary>Length of the day</summary>
        public double DayLength
        {
            get
            {
                return this._DayLength;
            }
            set
            {
                this._DayLength = value;
            }
        }
        
        /// <summary>Annual average air temperature</summary>
        public double AirTemperatureAnnualAverage
        {
            get
            {
                return this._AirTemperatureAnnualAverage;
            }
            set
            {
                this._AirTemperatureAnnualAverage = value;
            }
        }
        
        /// <summary>Albedo of soil</summary>
        public double Albedo
        {
            get
            {
                return this._Albedo;
            }
            set
            {
                this._Albedo = value;
            }
        }
        
        /// <summary>Water equivalent of snow pack</summary>
        public double WaterEquivalentOfSnowPack
        {
            get
            {
                return this._WaterEquivalentOfSnowPack;
            }
            set
            {
                this._WaterEquivalentOfSnowPack = value;
            }
        }
        
        /// <summary>Hourly air temperature</summary>
        public double[] AirTemperatureHourly
        {
            get
            {
                return this._AirTemperatureHourly;
            }
            set
            {
                this._AirTemperatureHourly = value;
            }
        }
        
        /// <summary>Hour of sunrise</summary>
        public double HourOfSunrise
        {
            get
            {
                return this._HourOfSunrise;
            }
            set
            {
                this._HourOfSunrise = value;
            }
        }
        
        /// <summary>Hour of sunset</summary>
        public double HourOfSunset
        {
            get
            {
                return this._HourOfSunset;
            }
            set
            {
                this._HourOfSunset = value;
            }
        }
        #endregion
        
        #region IDomainClass members
        /// <summary>Domain Class description</summary>
        public virtual  string Description
        {
            get
            {
                return "Exogenous variables of SoilT component ";
            }
        }
        
        /// <summary>Domain Class URL</summary>
        public virtual  string URL
        {
            get
            {
                return "http://";
            }
        }
        
        /// <summary>Domain Class Properties</summary>
        public virtual IDictionary<string, PropertyInfo> PropertiesDescription
        {
            get
            {
                return _parametersIO.GetCachedProperties(typeof(IDomainClass));
            }
        }
        #endregion
        
        /// <summary>Clears the values of the properties of the domain class by using the default value for the type of each property (e.g '0' for numbers, 'the empty string' for strings, etc.)</summary>
        public virtual Boolean ClearValues()
        {
            _AirTemperatureMaximum = default(System.Double);
            _AirTemperatureMinimum = default(System.Double);
            _LatentHeatFlux = default(System.Double);
            _NetRadiation = default(System.Double);
            _GlobalSolarRadiation = default(System.Double);
            _DayLength = default(System.Double);
            _AirTemperatureAnnualAverage = default(System.Double);
            _Albedo = default(System.Double);
            _WaterEquivalentOfSnowPack = default(System.Double);
            _AirTemperatureHourly = new double[24];
            _HourOfSunrise = default(System.Double);
            _HourOfSunset = default(System.Double);
            // Returns true if everything is ok
            return true;
        }
        
        #region Clone
        /// <summary>Implement ICloneable.Clone()</summary>
        public virtual Object Clone()
        {
            // Shallow copy by default
            IDomainClass myclass = (IDomainClass) this.MemberwiseClone();
            _parametersIO.PopulateClonedCopy(myclass);
            return myclass;
        }
        #endregion

        /// <summary>
        /// Initializes the structure.
        /// </summary>
        public void Initialize()
        {
            Initialize(false, 0);
        }

        /// <summary>
        /// Initializes the structure.
        /// </summary>
        /// <param name="resetLayersNumber"><c>true</c> if horizon list has
        /// to be initialized.</param>
        /// <param name="layersNumber">Number of layers to set.</param>
        public void Initialize(bool resetLayersNumber, int layersNumber)
        {
        }

        /// <summary>
        /// Initializes the structure properties to their default value.
        /// </summary>
        /// <param name="allValues"><c>true</c> if all values have to be set,
        /// <c>false</c> if only <c>NaN</c> or <c>null</c> values have to be set.</param>
        public void SetDefaultValues(bool allValues)
        {
        }
    }
}
