//------------------------------------------------------------------------------
// <auto-generated>
//     Il codice è stato generato da uno strumento.
//     Versione runtime:2.0.50727.5477
//
//     Le modifiche apportate a questo file possono provocare un comportamento non corretto e andranno perse se
//     il codice viene rigenerato.
// </auto-generated>
//------------------------------------------------------------------------------

/// This class was created from file C:\Users\Diprove\Desktop\Reimplementazione\SoilT\UNIMI.SoilT_perSoilBorne\UNIMI.SoilT\DataStructure\SoilTemperatureExogenous.xml
/// DCC - Domain Class Coder, http://agsys.cra-cin.it/tools , see Applications, DCC
namespace UNIMI.SoilT.Interfaces
{
    using System;
    using CRA.ModelLayer;
    using CRA.ModelLayer.Core;
    
    
    /// <summary>ExogenousVarInfoClasses contain the attributes for each variable in the domain class RainData. Attributes are valorized via the static constructor. The data-type VarInfo causes  a dependency to the assembly CRA.ModelLayer.dll</summary>
    public class ExogenousVarInfo : IVarInfoClass
    {
        
        #region Private fields
        static VarInfo _AirTemperatureMaximum = new VarInfo();
        
        static VarInfo _AirTemperatureMinimum = new VarInfo();
        
        static VarInfo _LatentHeatFlux = new VarInfo();
        
        static VarInfo _NetRadiation = new VarInfo();
        
        static VarInfo _GlobalSolarRadiation = new VarInfo();
        
        static VarInfo _DayLength = new VarInfo();
        
        static VarInfo _AirTemperatureAnnualAverage = new VarInfo();
        
        static VarInfo _Albedo = new VarInfo();
        
        static VarInfo _WaterEquivalentOfSnowPack = new VarInfo();
        
        static VarInfo _AirTemperatureHourly = new VarInfo();
        
        static VarInfo _HourOfSunrise = new VarInfo();
        
        static VarInfo _HourOfSunset = new VarInfo();
        #endregion
        
        /// <summary>Constructor</summary>
        static ExogenousVarInfo()
        {
            ExogenousVarInfo.DescribeVariables();
        }
        
        #region IVarInfoClass members
        /// <summary>Domain Class description</summary>
        public virtual  string Description
        {
            get
            {
                return "Exogenous variables of SoilT component ";
            }
        }
        
        /// <summary>Reference to the ontology</summary>
        public  string URL
        {
            get
            {
                return "http://";
            }
        }
        
        /// <summary>Value domain class of reference</summary>
        public  string DomainClassOfReference
        {
            get
            {
                return "Exogenous";
            }
        }
        #endregion
        
        #region Public properties
        /// <summary>Maximum daily air temperature</summary>
        public static  VarInfo AirTemperatureMaximum
        {
            get
            {
                return  _AirTemperatureMaximum;
            }
        }
        
        /// <summary>Minimum daily air temperature</summary>
        public static  VarInfo AirTemperatureMinimum
        {
            get
            {
                return  _AirTemperatureMinimum;
            }
        }
        
        /// <summary>Surface latent heat flux as an optional of temperature model</summary>
        public static  VarInfo LatentHeatFlux
        {
            get
            {
                return  _LatentHeatFlux;
            }
        }
        
        /// <summary>Net radiation as an optional of temperature model</summary>
        public static  VarInfo NetRadiation
        {
            get
            {
                return  _NetRadiation;
            }
        }
        
        /// <summary>Daily global solar radiation</summary>
        public static  VarInfo GlobalSolarRadiation
        {
            get
            {
                return  _GlobalSolarRadiation;
            }
        }
        
        /// <summary>Length of the day</summary>
        public static  VarInfo DayLength
        {
            get
            {
                return  _DayLength;
            }
        }
        
        /// <summary>Annual average air temperature</summary>
        public static  VarInfo AirTemperatureAnnualAverage
        {
            get
            {
                return  _AirTemperatureAnnualAverage;
            }
        }
        
        /// <summary>Albedo of soil</summary>
        public static  VarInfo Albedo
        {
            get
            {
                return  _Albedo;
            }
        }
        
        /// <summary>Water equivalent of snow pack</summary>
        public static  VarInfo WaterEquivalentOfSnowPack
        {
            get
            {
                return  _WaterEquivalentOfSnowPack;
            }
        }
        
        /// <summary>Hourly air temperature</summary>
        public static  VarInfo AirTemperatureHourly
        {
            get
            {
                return  _AirTemperatureHourly;
            }
        }
        
        /// <summary>Hour of sunrise</summary>
        public static  VarInfo HourOfSunrise
        {
            get
            {
                return  _HourOfSunrise;
            }
        }
        
        /// <summary>Hour of sunset</summary>
        public static  VarInfo HourOfSunset
        {
            get
            {
                return  _HourOfSunset;
            }
        }
        #endregion
        
        #region VarInfo values
        /// <summary>Set VarInfo values</summary>
        static void DescribeVariables()
        {
            //   
            _AirTemperatureMaximum.Name = "AirTemperatureMaximum";
            _AirTemperatureMaximum.Description = "Maximum daily air temperature";
            _AirTemperatureMaximum.MaxValue = 60;
            _AirTemperatureMaximum.MinValue = -40;
            _AirTemperatureMaximum.DefaultValue = 15;
            _AirTemperatureMaximum.Units = "°C";
            _AirTemperatureMaximum.URL = "http://";
            _AirTemperatureMaximum.ValueType = VarInfoValueTypes.GetInstanceForName("Double");
            //   
            _AirTemperatureMinimum.Name = "AirTemperatureMinimum";
            _AirTemperatureMinimum.Description = "Minimum daily air temperature";
            _AirTemperatureMinimum.MaxValue = 50;
            _AirTemperatureMinimum.MinValue = -60;
            _AirTemperatureMinimum.DefaultValue = 5;
            _AirTemperatureMinimum.Units = "°C";
            _AirTemperatureMinimum.URL = "http://";
            _AirTemperatureMinimum.ValueType = VarInfoValueTypes.GetInstanceForName("Double");
            //   
            _LatentHeatFlux.Name = "LatentHeatFlux";
            _LatentHeatFlux.Description = "Surface latent heat flux as an optional of temperature model";
            _LatentHeatFlux.MaxValue = 1000;
            _LatentHeatFlux.MinValue = -10;
            _LatentHeatFlux.DefaultValue = 0;
            _LatentHeatFlux.Units = "W m-2";
            _LatentHeatFlux.URL = "http://";
            _LatentHeatFlux.ValueType = VarInfoValueTypes.GetInstanceForName("Double");
            //   
            _NetRadiation.Name = "NetRadiation";
            _NetRadiation.Description = "Net radiation as an optional of temperature model";
            _NetRadiation.MaxValue = 1000;
            _NetRadiation.MinValue = -10;
            _NetRadiation.DefaultValue = 0;
            _NetRadiation.Units = "W m-2 ";
            _NetRadiation.URL = "http://";
            _NetRadiation.ValueType = VarInfoValueTypes.GetInstanceForName("Double");
            //   
            _GlobalSolarRadiation.Name = "GlobalSolarRadiation";
            _GlobalSolarRadiation.Description = "Daily global solar radiation";
            _GlobalSolarRadiation.MaxValue = 50;
            _GlobalSolarRadiation.MinValue = 0;
            _GlobalSolarRadiation.DefaultValue = 15;
            _GlobalSolarRadiation.Units = "Mj m-2 d-1";
            _GlobalSolarRadiation.URL = "http://";
            _GlobalSolarRadiation.ValueType = VarInfoValueTypes.GetInstanceForName("Double");
            //   
            _DayLength.Name = "DayLength";
            _DayLength.Description = "Length of the day";
            _DayLength.MaxValue = 24;
            _DayLength.MinValue = 0;
            _DayLength.DefaultValue = 10;
            _DayLength.Units = "h";
            _DayLength.URL = "http://";
            _DayLength.ValueType = VarInfoValueTypes.GetInstanceForName("Double");
            //   
            _AirTemperatureAnnualAverage.Name = "AirTemperatureAnnualAverage";
            _AirTemperatureAnnualAverage.Description = "Annual average air temperature";
            _AirTemperatureAnnualAverage.MaxValue = 50;
            _AirTemperatureAnnualAverage.MinValue = -40;
            _AirTemperatureAnnualAverage.DefaultValue = 15;
            _AirTemperatureAnnualAverage.Units = "°C";
            _AirTemperatureAnnualAverage.URL = "http://";
            _AirTemperatureAnnualAverage.ValueType = VarInfoValueTypes.GetInstanceForName("Double");
            //   
            _Albedo.Name = "Albedo";
            _Albedo.Description = "Albedo of soil";
            _Albedo.MaxValue = 1;
            _Albedo.MinValue = 0;
            _Albedo.DefaultValue = 0.2;
            _Albedo.Units = "unitless";
            _Albedo.URL = "http://";
            _Albedo.ValueType = VarInfoValueTypes.GetInstanceForName("Double");
            //   
            _WaterEquivalentOfSnowPack.Name = "WaterEquivalentOfSnowPack";
            _WaterEquivalentOfSnowPack.Description = "Water equivalent of snow pack";
            _WaterEquivalentOfSnowPack.MaxValue = 1000;
            _WaterEquivalentOfSnowPack.MinValue = 0;
            _WaterEquivalentOfSnowPack.DefaultValue = 10;
            _WaterEquivalentOfSnowPack.Units = "mm";
            _WaterEquivalentOfSnowPack.URL = "http://";
            _WaterEquivalentOfSnowPack.ValueType = VarInfoValueTypes.GetInstanceForName("Double");
            //   
            _AirTemperatureHourly.Name = "AirTemperatureHourly";
            _AirTemperatureHourly.Description = "Hourly air temperature";
            _AirTemperatureHourly.MaxValue = 50;
            _AirTemperatureHourly.MinValue = -50;
            _AirTemperatureHourly.DefaultValue = 15;
            _AirTemperatureHourly.Units = "°C";
            _AirTemperatureHourly.URL = "http://";
            _AirTemperatureHourly.ValueType = VarInfoValueTypes.GetInstanceForName("ArrayDouble");
            //   
            _HourOfSunrise.Name = "HourOfSunrise";
            _HourOfSunrise.Description = "Hour of sunrise";
            _HourOfSunrise.MaxValue = 24;
            _HourOfSunrise.MinValue = 0;
            _HourOfSunrise.DefaultValue = 6;
            _HourOfSunrise.Units = "h";
            _HourOfSunrise.URL = "http://";
            _HourOfSunrise.ValueType = VarInfoValueTypes.GetInstanceForName("Double");
            //   
            _HourOfSunset.Name = "HourOfSunset";
            _HourOfSunset.Description = "Hour of sunset";
            _HourOfSunset.MaxValue = 24;
            _HourOfSunset.MinValue = 0;
            _HourOfSunset.DefaultValue = 17;
            _HourOfSunset.Units = "h";
            _HourOfSunset.URL = "http://";
            _HourOfSunset.ValueType = VarInfoValueTypes.GetInstanceForName("Double");
        }
        #endregion
    }
}
