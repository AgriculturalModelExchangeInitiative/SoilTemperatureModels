//------------------------------------------------------------------------------
// <auto-generated>
//     Il codice Ã¨ stato generato da uno strumento.
//     Versione runtime:2.0.50727.5477
//
//     Le modifiche apportate a questo file possono provocare un comportamento non corretto e andranno perse se
//     il codice viene rigenerato.
// </auto-generated>
//------------------------------------------------------------------------------

/// This class was created from file C:\Users\Diprove\Desktop\Reimplementazione\SoilT\UNIMI.SoilT_perSoilBorne\UNIMI.SoilT\DataStructure\SoilTemperatureStates.xml
/// DCC - Domain Class Coder, http://agsys.cra-cin.it/tools , see Applications, DCC
// 
namespace UNIMI.SoilT.Interfaces
{
    using System;
    using System.Collections.Generic;
    using CRA.ModelLayer;
    using System.Reflection;
    using CRA.ModelLayer.ParametersManagement;
    using CRA.ModelLayer.Core;
    
    
    /// <summary>States Domain class contains the accessors to values</summary>
    public class States : ICloneable, IDomainClass
    {
        
        #region Private fields
        //private List<LayerStates> _Layers =new List<LayerStates>();
        // LayerStates as array - begin
        private double[] _HeatCapacity;
        private double[] _SoilTemperatureByLayers;
        private double[] _TemperatureConductance;
        private double[] _LayerThickness;
        private double[] _Clay;
        private double[] _BulkDensity;
        private double[] _VolumetricWaterContent;
        private double[] _SoilTemperatureByLayersHourly;
        private double[] _SoilTemperaturePreviousDay;
        private double[] _SoilTemperatureRangeByLayers;
        private double[] _SoilTemperatureMaximum;
        private double[] _SoilTemperatureMinimum;
        private double[] _Sand;
        private double[] _Silt;
        private double[] _OrganicMatter;
        private double[] _VolumetricWaterContentAtSaturation;
        private double[] _ThermalConductivity;
        private double[] _ThermalDiffusivity;
        public double[] HeatCapacity
        {
            get
            {
                return this._HeatCapacity;
            }
            set
            {
                this._HeatCapacity = value;
            }
        }

        /// <summary>Soil temperature of each layer</summary>
        public double[] SoilTemperatureByLayers
        {
            get
            {
                return this._SoilTemperatureByLayers;
            }
            set
            {
                this._SoilTemperatureByLayers = value;
            }
        }

        /// <summary>Temperature conductance</summary>
        public double[] TemperatureConductance
        {
            get
            {
                return this._TemperatureConductance;
            }
            set
            {
                this._TemperatureConductance = value;
            }
        }

        /// <summary>Soil layer thickness</summary>
        public double[] LayerThickness
        {
            get
            {
                return this._LayerThickness;
            }
            set
            {
                this._LayerThickness = value;
            }
        }

        /// <summary>Clay content of soil layer</summary>
        public double[] Clay
        {
            get
            {
                return this._Clay;
            }
            set
            {
                this._Clay = value;
            }
        }

        /// <summary>Bulk density</summary>
        public double[] BulkDensity
        {
            get
            {
                return this._BulkDensity;
            }
            set
            {
                this._BulkDensity = value;
            }
        }

        /// <summary>Volumetric soil water content</summary>
        public double[] VolumetricWaterContent
        {
            get
            {
                return this._VolumetricWaterContent;
            }
            set
            {
                this._VolumetricWaterContent = value;
            }
        }

        /// <summary>Hourly soil temperature by layers</summary>
        public double[] SoilTemperatureByLayersHourly
        {
            get
            {
                return this._SoilTemperatureByLayersHourly;
            }
            set
            {
                this._SoilTemperatureByLayersHourly = value;
            }
        }

        /// <summary>Last hourly temperature of the day</summary>
        public double[] SoilTemperaturePreviousDay
        {
            get
            {
                return this._SoilTemperaturePreviousDay;
            }
            set
            {
                this._SoilTemperaturePreviousDay = value;
            }
        }

        /// <summary>Soil temperature range by layers</summary>
        public double[] SoilTemperatureRangeByLayers
        {
            get
            {
                return this._SoilTemperatureRangeByLayers;
            }
            set
            {
                this._SoilTemperatureRangeByLayers = value;
            }
        }

        /// <summary>Maximum soil temperature by layers</summary>
        public double[] SoilTemperatureMaximum
        {
            get
            {
                return this._SoilTemperatureMaximum;
            }
            set
            {
                this._SoilTemperatureMaximum = value;
            }
        }

        /// <summary>Minimum soil temperature by layers</summary>
        public double[] SoilTemperatureMinimum
        {
            get
            {
                return this._SoilTemperatureMinimum;
            }
            set
            {
                this._SoilTemperatureMinimum = value;
            }
        }

        /// <summary>Sand content of soil layer</summary>
        public double[] Sand
        {
            get
            {
                return this._Sand;
            }
            set
            {
                this._Sand = value;
            }
        }

        /// <summary>Silt content of soil layer</summary>
        public double[] Silt
        {
            get
            {
                return this._Silt;
            }
            set
            {
                this._Silt = value;
            }
        }

        /// <summary>Organic matter content of soil layer</summary>
        public double[] OrganicMatter
        {
            get
            {
                return this._OrganicMatter;
            }
            set
            {
                this._OrganicMatter = value;
            }
        }

        /// <summary>Volumetric water content at saturation</summary>
        public double[] VolumetricWaterContentAtSaturation
        {
            get
            {
                return this._VolumetricWaterContentAtSaturation;
            }
            set
            {
                this._VolumetricWaterContentAtSaturation = value;
            }
        }

        /// <summary>Thermal conductivity of soil layer</summary>
        public double[] ThermalConductivity
        {
            get
            {
                return this._ThermalConductivity;
            }
            set
            {
                this._ThermalConductivity = value;
            }
        }

        /// <summary>Thermal diffusivity of soil layer</summary>
        public double[] ThermalDiffusivity
        {
            get
            {
                return this._ThermalDiffusivity;
            }
            set
            {
                this._ThermalDiffusivity = value;
            }
        }
        // LayerStates as array - end
        private double _SurfaceSoilTemperature;
        
        private double _SoilProfileDepth;
        #endregion
        
        #region Private field for properties
        private ParametersIO _parametersIO;
        #endregion
        
        #region Constructor
        /// <summary>No parameters constructor</summary>
        public States()
        {
            _parametersIO = new ParametersIO(this);
        }
        #endregion
        
        #region Public properties
        /// <summary>Soil layer states</summary>
        //public List<LayerStates> Layers
        //{
        //    get
        //    {
        //        return this._Layers;
        //    }
        //    set
        //    {
        //        this._Layers = value;
        //    }
        //}
        
        /// <summary>Average surface soil temperature</summary>
        public double SurfaceSoilTemperature
        {
            get
            {
                return this._SurfaceSoilTemperature;
            }
            set
            {
                this._SurfaceSoilTemperature = value;
            }
        }
        
        /// <summary>Soil profile depth</summary>
        public double SoilProfileDepth
        {
            get
            {
                return this._SoilProfileDepth;
            }
            set
            {
                this._SoilProfileDepth = value;
            }
        }
        #endregion
        
        #region IDomainClass members
        /// <summary>Domain Class description</summary>
        public virtual  string Description
        {
            get
            {
                return "State variables of SoilT component ";
            }
        }
        
        /// <summary>Domain Class URL</summary>
        public virtual  string URL
        {
            get
            {
                return "http://";
            }
        }
        
        /// <summary>Domain Class Properties</summary>
        public virtual IDictionary<string, PropertyInfo> PropertiesDescription
        {
            get
            {
                return _parametersIO.GetCachedProperties(typeof(IDomainClass));
            }
        }
        #endregion
        
        /// <summary>Clears the values of the properties of the domain class by using the default value for the type of each property (e.g '0' for numbers, 'the empty string' for strings, etc.)</summary>
        public virtual Boolean ClearValues()
        {
            //_Layers = default(List<LayerStates>);
            _SurfaceSoilTemperature = default(System.Double);
            _SoilProfileDepth = default(System.Double);
            // new type - begin
            _HeatCapacity = default(double[]);
            _SoilTemperatureByLayers = default(double[]);
            _TemperatureConductance = default(double[]);
            _LayerThickness = default(double[]);
            _Clay = default(double[]);
            _BulkDensity = default(double[]);
            _VolumetricWaterContent = default(double[]);
            _SoilTemperatureByLayersHourly = default(double[]);
            _SoilTemperaturePreviousDay = default(double[]);
            _SoilTemperatureRangeByLayers = default(double[]);
            _SoilTemperatureMaximum = default(double[]);
            _SoilTemperatureMinimum = default(double[]);
            _Sand = default(double[]);
            _Silt = default(double[]);
            _OrganicMatter = default(double[]);
            _VolumetricWaterContentAtSaturation = default(double[]);
            _ThermalConductivity = default(double[]);
            _ThermalDiffusivity = default(double[]);
            // new type - end
            // Returns true if everything is ok
            return true;
        }
        
        #region Clone
        /// <summary>Implement ICloneable.Clone()</summary>
        public virtual Object Clone()
        {
            // Shallow copy by default
            IDomainClass myclass = (IDomainClass) this.MemberwiseClone();
            _parametersIO.PopulateClonedCopy(myclass);
            return myclass;
        }
        #endregion

        /// <summary>
        /// Initializes the structure.
        /// </summary>
        public void Initialize()
        {
            Initialize(false, 0);
        }

        /// <summary>
        /// Initializes the structure.
        /// </summary>
        /// <param name="resetLayersNumber"><c>true</c> if horizon list has
        /// to be initialized.</param>
        /// <param name="layersNumber">Number of layers to set.</param>
        public void Initialize(bool resetLayersNumber, int layersNumber)
        {
            if (resetLayersNumber)
            {
                if (layersNumber > 0)
                {
                    //Layers = new List<LayerStates>();
                    //LayerStates ls = null;
                    //for (int i = 0; i < layersNumber; i++)
                    //{
                    //    ls = new LayerStates();
                    //    ls.Initialize(resetLayersNumber, layersNumber);
                    //    Layers.Add(ls);
                    //}
                    _HeatCapacity = new double[layersNumber];
                    _SoilTemperatureByLayers = new double[layersNumber];
                    _TemperatureConductance = new double[layersNumber];
                    _LayerThickness = new double[layersNumber];
                    _Clay = new double[layersNumber];
                    _BulkDensity = new double[layersNumber];
                    _VolumetricWaterContent = new double[layersNumber];
                    _SoilTemperatureByLayersHourly = new double[layersNumber * 24];
                    _SoilTemperaturePreviousDay = new double[layersNumber];
                    _SoilTemperatureRangeByLayers = new double[layersNumber];
                    _SoilTemperatureMaximum = new double[layersNumber];
                    _SoilTemperatureMinimum = new double[layersNumber];
                    _Sand = new double[layersNumber];
                    _Silt = new double[layersNumber];
                    _OrganicMatter = new double[layersNumber];
                    _VolumetricWaterContentAtSaturation = new double[layersNumber];
                    _ThermalConductivity = new double[layersNumber];
                    _ThermalDiffusivity = new double[layersNumber];
                }
                else
                {
                    //Layers = null;
                    _HeatCapacity = default(double[]);
                    _SoilTemperatureByLayers = default(double[]);
                    _TemperatureConductance = default(double[]);
                    _LayerThickness = default(double[]);
                    _Clay = default(double[]);
                    _BulkDensity = default(double[]);
                    _VolumetricWaterContent = default(double[]);
                    _SoilTemperatureByLayersHourly = default(double[]);
                    _SoilTemperaturePreviousDay = default(double[]);
                    _SoilTemperatureRangeByLayers = default(double[]);
                    _SoilTemperatureMaximum = default(double[]);
                    _SoilTemperatureMinimum = default(double[]);
                    _Sand = default(double[]);
                    _Silt = default(double[]);
                    _OrganicMatter = default(double[]);
                    _VolumetricWaterContentAtSaturation = default(double[]);
                    _ThermalConductivity = default(double[]);
                    _ThermalDiffusivity = default(double[]);
                }
            }
            else
            {
                //if (Layers != null)
                //{
                //    foreach (LayerStates ls in Layers)
                //    {
                //        ls.Initialize();
                //    }
                //}
                if (_HeatCapacity != null && _HeatCapacity.Length > 0)
                {
                    var currentLayersNumber = _HeatCapacity.Length;
                    _HeatCapacity = new double[currentLayersNumber];
                    _SoilTemperatureByLayers = new double[currentLayersNumber];
                    _TemperatureConductance = new double[currentLayersNumber];
                    _LayerThickness = new double[currentLayersNumber];
                    _Clay = new double[currentLayersNumber];
                    _BulkDensity = new double[currentLayersNumber];
                    _VolumetricWaterContent = new double[currentLayersNumber];
                    _SoilTemperatureByLayersHourly = new double[currentLayersNumber * 24];
                    _SoilTemperaturePreviousDay = new double[currentLayersNumber];
                    _SoilTemperatureRangeByLayers = new double[currentLayersNumber];
                    _SoilTemperatureMaximum = new double[currentLayersNumber];
                    _SoilTemperatureMinimum = new double[currentLayersNumber];
                    _Sand = new double[currentLayersNumber];
                    _Silt = new double[currentLayersNumber];
                    _OrganicMatter = new double[currentLayersNumber];
                    _VolumetricWaterContentAtSaturation = new double[currentLayersNumber];
                    _ThermalConductivity = new double[currentLayersNumber];
                    _ThermalDiffusivity = new double[currentLayersNumber];
                }
            }
        }

        /// <summary>
        /// Initializes the structure properties to their default value.
        /// </summary>
        /// <param name="allValues"><c>true</c> if all values have to be set,
        /// <c>false</c> if only <c>NaN</c> or <c>null</c> values have to be set.</param>
        public void SetDefaultValues(bool allValues)
        {
            //if (Layers != null)
            //{
            //    foreach (LayerStates ls in Layers)
            //    {
            //        ls.SetDefaultValues(allValues);
            //    }
            //}
            // new type - begin
            if (_HeatCapacity != null && _HeatCapacity.Length > 0)
            {
                for (int i = 0; i < _HeatCapacity.Length; i++) { _HeatCapacity[i] = StatesVarInfo.HeatCapacity.DefaultValue; }
                for (int i = 0; i < _SoilTemperatureByLayers.Length; i++) { _SoilTemperatureByLayers[i] = StatesVarInfo.SoilTemperatureByLayers.DefaultValue; }
                for (int i = 0; i < _TemperatureConductance.Length; i++) { _TemperatureConductance[i] = StatesVarInfo.TemperatureConductance.DefaultValue; }
                for (int i = 0; i < _LayerThickness.Length; i++) { _LayerThickness[i] = StatesVarInfo.LayerThickness.DefaultValue; }
                for (int i = 0; i < _Clay.Length; i++) { _Clay[i] = StatesVarInfo.Clay.DefaultValue; }
                for (int i = 0; i < _BulkDensity.Length; i++) { _BulkDensity[i] = StatesVarInfo.BulkDensity.DefaultValue; }
                for (int i = 0; i < _VolumetricWaterContent.Length; i++) { _VolumetricWaterContent[i] = StatesVarInfo.VolumetricWaterContent.DefaultValue; }
                for (int i = 0; i < _SoilTemperatureByLayersHourly.Length; i++)
                {
                    _SoilTemperatureByLayersHourly[i] = StatesVarInfo.SoilTemperatureByLayersHourly.DefaultValue;
                }
                for (int i = 0; i < _SoilTemperaturePreviousDay.Length; i++) { _SoilTemperaturePreviousDay[i] = StatesVarInfo.SoilTemperaturePreviousDay.DefaultValue; }
                for (int i = 0; i < _SoilTemperatureRangeByLayers.Length; i++) { _SoilTemperatureRangeByLayers[i] = StatesVarInfo.SoilTemperatureRangeByLayers.DefaultValue; }
                for (int i = 0; i < _SoilTemperatureMaximum.Length; i++) { _SoilTemperatureMaximum[i] = StatesVarInfo.SoilTemperatureMaximum.DefaultValue; }
                for (int i = 0; i < _SoilTemperatureMinimum.Length; i++) { _SoilTemperatureMinimum[i] = StatesVarInfo.SoilTemperatureMinimum.DefaultValue; }
                for (int i = 0; i < _Sand.Length; i++) { _Sand[i] = StatesVarInfo.Sand.DefaultValue; }
                for (int i = 0; i < _Silt.Length; i++) { _Silt[i] = StatesVarInfo.Silt.DefaultValue; }
                for (int i = 0; i < _OrganicMatter.Length; i++) { _OrganicMatter[i] = StatesVarInfo.OrganicMatter.DefaultValue; }
                for (int i = 0; i < _VolumetricWaterContentAtSaturation.Length; i++) { _VolumetricWaterContentAtSaturation[i] = StatesVarInfo.VolumetricWaterContentAtSaturation.DefaultValue; }
                for (int i = 0; i < _ThermalConductivity.Length; i++) { _ThermalConductivity[i] = StatesVarInfo.ThermalConductivity.DefaultValue; }
                for (int i = 0; i < _ThermalDiffusivity.Length; i++) { _ThermalDiffusivity[i] = StatesVarInfo.ThermalDiffusivity.DefaultValue; }

            }
            // new type - end
        }
    }
}
